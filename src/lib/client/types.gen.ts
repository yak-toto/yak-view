// This file is auto-generated by @hey-api/openapi-ts

/**
 * AllBetsResponse
 */
export type AllBetsResponse = {
    /**
     * Phases
     */
    phases: Array<PhaseOut>;
    /**
     * Groups
     */
    groups: Array<GroupWithPhaseIdOut>;
    /**
     * Score Bets
     */
    score_bets: Array<ScoreBetWithGroupIdOut>;
    /**
     * Binary Bets
     */
    binary_bets: Array<BinaryBetWithGroupIdOut>;
};

/**
 * AllGroupsResponse
 */
export type AllGroupsResponse = {
    /**
     * Phases
     */
    phases: Array<PhaseOut>;
    /**
     * Groups
     */
    groups: Array<GroupWithPhaseIdOut>;
};

/**
 * AllTeamsResponse
 */
export type AllTeamsResponse = {
    /**
     * Teams
     */
    teams: Array<TeamOut>;
};

/**
 * BetsByGroupCodeResponse
 */
export type BetsByGroupCodeResponse = {
    phase: PhaseOut;
    group: GroupOut;
    /**
     * Score Bets
     */
    score_bets: Array<ScoreBetOut>;
    /**
     * Binary Bets
     */
    binary_bets: Array<BinaryBetOut>;
};

/**
 * BetsByPhaseCodeResponse
 */
export type BetsByPhaseCodeResponse = {
    phase: PhaseOut;
    /**
     * Groups
     */
    groups: Array<GroupOut>;
    /**
     * Score Bets
     */
    score_bets: Array<ScoreBetWithGroupIdOut>;
    /**
     * Binary Bets
     */
    binary_bets: Array<BinaryBetWithGroupIdOut>;
};

/**
 * BinaryBetOut
 */
export type BinaryBetOut = {
    /**
     * Id
     */
    id: string;
    /**
     * Locked
     */
    locked: boolean;
    team1?: TeamWithWonOut | null;
    team2?: TeamWithWonOut | null;
};

/**
 * BinaryBetResponse
 */
export type BinaryBetResponse = {
    phase: PhaseOut;
    group: GroupOut;
    binary_bet: BinaryBetOut;
};

/**
 * BinaryBetWithGroupIdOut
 */
export type BinaryBetWithGroupIdOut = {
    /**
     * Id
     */
    id: string;
    /**
     * Locked
     */
    locked: boolean;
    group: Group;
    team1?: TeamWithWonOut | null;
    team2?: TeamWithWonOut | null;
};

/**
 * CurrentUserOut
 */
export type CurrentUserOut = {
    /**
     * Id
     */
    id: string;
    /**
     * Name
     */
    name: string;
};

/**
 * ErrorOut
 */
export type ErrorOut = {
    /**
     * Ok
     */
    ok?: boolean;
    /**
     * Error Code
     */
    error_code: number;
    /**
     * Description
     */
    description: string;
};

/**
 * FlagOut
 */
export type FlagOut = {
    /**
     * Url
     */
    url: string;
};

/**
 * GenericOut[AllBetsResponse]
 */
export type GenericOutAllBetsResponse = {
    /**
     * Ok
     */
    ok?: boolean;
    result: AllBetsResponse;
};

/**
 * GenericOut[AllGroupsResponse]
 */
export type GenericOutAllGroupsResponse = {
    /**
     * Ok
     */
    ok?: boolean;
    result: AllGroupsResponse;
};

/**
 * GenericOut[AllTeamsResponse]
 */
export type GenericOutAllTeamsResponse = {
    /**
     * Ok
     */
    ok?: boolean;
    result: AllTeamsResponse;
};

/**
 * GenericOut[BetsByGroupCodeResponse]
 */
export type GenericOutBetsByGroupCodeResponse = {
    /**
     * Ok
     */
    ok?: boolean;
    result: BetsByGroupCodeResponse;
};

/**
 * GenericOut[BetsByPhaseCodeResponse]
 */
export type GenericOutBetsByPhaseCodeResponse = {
    /**
     * Ok
     */
    ok?: boolean;
    result: BetsByPhaseCodeResponse;
};

/**
 * GenericOut[BinaryBetResponse]
 */
export type GenericOutBinaryBetResponse = {
    /**
     * Ok
     */
    ok?: boolean;
    result: BinaryBetResponse;
};

/**
 * GenericOut[CurrentUserOut]
 */
export type GenericOutCurrentUserOut = {
    /**
     * Ok
     */
    ok?: boolean;
    result: CurrentUserOut;
};

/**
 * GenericOut[GroupRankResponse]
 */
export type GenericOutGroupRankResponse = {
    /**
     * Ok
     */
    ok?: boolean;
    result: GroupRankResponse;
};

/**
 * GenericOut[GroupResponse]
 */
export type GenericOutGroupResponse = {
    /**
     * Ok
     */
    ok?: boolean;
    result: GroupResponse;
};

/**
 * GenericOut[GroupsByPhaseCodeResponse]
 */
export type GenericOutGroupsByPhaseCodeResponse = {
    /**
     * Ok
     */
    ok?: boolean;
    result: GroupsByPhaseCodeResponse;
};

/**
 * GenericOut[LoginOut]
 */
export type GenericOutLoginOut = {
    /**
     * Ok
     */
    ok?: boolean;
    result: LoginOut;
};

/**
 * GenericOut[NoneType]
 */
export type GenericOutNoneType = {
    /**
     * Ok
     */
    ok?: boolean;
    /**
     * Result
     */
    result: null;
};

/**
 * GenericOut[OneTeamResponse]
 */
export type GenericOutOneTeamResponse = {
    /**
     * Ok
     */
    ok?: boolean;
    result: OneTeamResponse;
};

/**
 * GenericOut[PasswordRequirementsOut]
 */
export type GenericOutPasswordRequirementsOut = {
    /**
     * Ok
     */
    ok?: boolean;
    result: PasswordRequirementsOut;
};

/**
 * GenericOut[PhaseOut]
 */
export type GenericOutPhaseOut = {
    /**
     * Ok
     */
    ok?: boolean;
    result: PhaseOut;
};

/**
 * GenericOut[RefreshOut]
 */
export type GenericOutRefreshOut = {
    /**
     * Ok
     */
    ok?: boolean;
    result: RefreshOut;
};

/**
 * GenericOut[ScoreBetResponse]
 */
export type GenericOutScoreBetResponse = {
    /**
     * Ok
     */
    ok?: boolean;
    result: ScoreBetResponse;
};

/**
 * GenericOut[SignupOut]
 */
export type GenericOutSignupOut = {
    /**
     * Ok
     */
    ok?: boolean;
    result: SignupOut;
};

/**
 * GenericOut[UserResult]
 */
export type GenericOutUserResult = {
    /**
     * Ok
     */
    ok?: boolean;
    result: UserResult;
};

/**
 * GenericOut[list[PhaseOut]]
 */
export type GenericOutListPhaseOut = {
    /**
     * Ok
     */
    ok?: boolean;
    /**
     * Result
     */
    result: Array<PhaseOut>;
};

/**
 * GenericOut[list[UserResult]]
 */
export type GenericOutListUserResult = {
    /**
     * Ok
     */
    ok?: boolean;
    /**
     * Result
     */
    result: Array<UserResult>;
};

/**
 * GenericOut[str]
 */
export type GenericOutStr = {
    /**
     * Ok
     */
    ok?: boolean;
    /**
     * Result
     */
    result: string;
};

/**
 * Group
 */
export type Group = {
    /**
     * Id
     */
    id: string;
};

/**
 * GroupOut
 */
export type GroupOut = {
    /**
     * Id
     */
    id: string;
    /**
     * Code
     */
    code: string;
    /**
     * Description
     */
    description: string;
};

/**
 * GroupPositionOut
 */
export type GroupPositionOut = {
    team: TeamOut;
    /**
     * Played
     */
    played: number;
    /**
     * Won
     */
    won: number;
    /**
     * Drawn
     */
    drawn: number;
    /**
     * Lost
     */
    lost: number;
    /**
     * Goals For
     */
    goals_for: number;
    /**
     * Goals Against
     */
    goals_against: number;
    /**
     * Goals Difference
     */
    goals_difference: number;
    /**
     * Points
     */
    points: number;
};

/**
 * GroupRankResponse
 */
export type GroupRankResponse = {
    phase: PhaseOut;
    group: GroupOut;
    /**
     * Group Rank
     */
    group_rank: Array<GroupPositionOut>;
};

/**
 * GroupResponse
 */
export type GroupResponse = {
    phase: PhaseOut;
    group: GroupOut;
};

/**
 * GroupWithPhaseIdOut
 */
export type GroupWithPhaseIdOut = {
    /**
     * Id
     */
    id: string;
    /**
     * Code
     */
    code: string;
    phase: Phase;
    /**
     * Description
     */
    description: string;
};

/**
 * GroupsByPhaseCodeResponse
 */
export type GroupsByPhaseCodeResponse = {
    phase: PhaseOut;
    /**
     * Groups
     */
    groups: Array<GroupOut>;
};

/**
 * Lang
 */
export type Lang = 'fr' | 'en';

/**
 * LoginIn
 */
export type LoginIn = {
    /**
     * Name
     */
    name: string;
    /**
     * Password
     */
    password: string;
};

/**
 * LoginOut
 */
export type LoginOut = {
    /**
     * Id
     */
    id: string;
    /**
     * Name
     */
    name: string;
    /**
     * Access Token
     */
    access_token: string;
    /**
     * Access Expires In
     */
    access_expires_in: number;
    /**
     * Refresh Token
     */
    refresh_token: string;
    /**
     * Refresh Expires In
     */
    refresh_expires_in: number;
};

/**
 * ModifyBinaryBetIn
 */
export type ModifyBinaryBetIn = {
    /**
     * Is One Won
     */
    is_one_won?: boolean | null;
    team1?: TeamModifyBinaryBetIn | null;
    team2?: TeamModifyBinaryBetIn | null;
};

/**
 * ModifyScoreBetIn
 */
export type ModifyScoreBetIn = {
    team1?: TeamModifyScoreBetIn | null;
    team2?: TeamModifyScoreBetIn | null;
};

/**
 * ModifyUserIn
 */
export type ModifyUserIn = {
    /**
     * Password
     */
    password: string;
};

/**
 * OneTeamResponse
 */
export type OneTeamResponse = {
    team: TeamOut;
};

/**
 * PasswordRequirementsOut
 */
export type PasswordRequirementsOut = {
    /**
     * Minimum Length
     */
    minimum_length: number;
    /**
     * Uppercase
     */
    uppercase: boolean;
    /**
     * Lowercase
     */
    lowercase: boolean;
    /**
     * Digit
     */
    digit: boolean;
    /**
     * No Space
     */
    no_space: boolean;
};

/**
 * Phase
 */
export type Phase = {
    /**
     * Id
     */
    id: string;
};

/**
 * PhaseOut
 */
export type PhaseOut = {
    /**
     * Id
     */
    id: string;
    /**
     * Code
     */
    code: string;
    /**
     * Description
     */
    description: string;
};

/**
 * RefreshIn
 */
export type RefreshIn = {
    /**
     * Refresh Token
     */
    refresh_token: string;
};

/**
 * RefreshOut
 */
export type RefreshOut = {
    /**
     * Access Token
     */
    access_token: string;
    /**
     * Access Expires In
     */
    access_expires_in: number;
    /**
     * Refresh Token
     */
    refresh_token: string;
    /**
     * Refresh Expires In
     */
    refresh_expires_in: number;
};

/**
 * ScoreBetOut
 */
export type ScoreBetOut = {
    /**
     * Id
     */
    id: string;
    /**
     * Locked
     */
    locked: boolean;
    team1?: TeamWithScoreOut | null;
    team2?: TeamWithScoreOut | null;
};

/**
 * ScoreBetResponse
 */
export type ScoreBetResponse = {
    phase: PhaseOut;
    group: GroupOut;
    score_bet: ScoreBetOut;
};

/**
 * ScoreBetWithGroupIdOut
 */
export type ScoreBetWithGroupIdOut = {
    /**
     * Id
     */
    id: string;
    /**
     * Locked
     */
    locked: boolean;
    group: Group;
    team1?: TeamWithScoreOut | null;
    team2?: TeamWithScoreOut | null;
};

/**
 * SignupIn
 */
export type SignupIn = {
    /**
     * Name
     */
    name: string;
    /**
     * First Name
     */
    first_name: string;
    /**
     * Last Name
     */
    last_name: string;
    /**
     * Password
     */
    password: string;
};

/**
 * SignupOut
 */
export type SignupOut = {
    /**
     * Id
     */
    id: string;
    /**
     * Name
     */
    name: string;
    /**
     * Access Token
     */
    access_token: string;
    /**
     * Access Expires In
     */
    access_expires_in: number;
    /**
     * Refresh Token
     */
    refresh_token: string;
    /**
     * Refresh Expires In
     */
    refresh_expires_in: number;
};

/**
 * SingleValidationErrorOut
 */
export type SingleValidationErrorOut = {
    /**
     * Field
     */
    field: string;
    /**
     * Error
     */
    error: string;
};

/**
 * TeamModifyBinaryBetIn
 */
export type TeamModifyBinaryBetIn = {
    /**
     * Id
     */
    id?: string | null;
};

/**
 * TeamModifyScoreBetIn
 */
export type TeamModifyScoreBetIn = {
    /**
     * Id
     */
    id?: string | null;
    /**
     * Score
     */
    score?: number | null;
};

/**
 * TeamOut
 */
export type TeamOut = {
    /**
     * Id
     */
    id: string;
    /**
     * Code
     */
    code: string;
    /**
     * Description
     */
    description: string;
    flag: FlagOut;
};

/**
 * TeamWithScoreOut
 */
export type TeamWithScoreOut = {
    /**
     * Id
     */
    id: string;
    /**
     * Code
     */
    code: string;
    /**
     * Description
     */
    description: string;
    flag: FlagOut;
    /**
     * Score
     */
    score?: number | null;
};

/**
 * TeamWithWonOut
 */
export type TeamWithWonOut = {
    /**
     * Id
     */
    id: string;
    /**
     * Code
     */
    code: string;
    /**
     * Description
     */
    description: string;
    flag: FlagOut;
    /**
     * Won
     */
    won?: boolean | null;
};

/**
 * UserResult
 */
export type UserResult = {
    /**
     * Rank
     */
    rank: number;
    /**
     * First Name
     */
    first_name: string;
    /**
     * Last Name
     */
    last_name: string;
    /**
     * Full Name
     */
    full_name: string;
    /**
     * Number Match Guess
     */
    number_match_guess: number;
    /**
     * Number Score Guess
     */
    number_score_guess: number;
    /**
     * Number Qualified Teams Guess
     */
    number_qualified_teams_guess: number;
    /**
     * Number First Qualified Guess
     */
    number_first_qualified_guess: number;
    /**
     * Number Quarter Final Guess
     */
    number_quarter_final_guess: number;
    /**
     * Number Semi Final Guess
     */
    number_semi_final_guess: number;
    /**
     * Number Final Guess
     */
    number_final_guess: number;
    /**
     * Number Winner Guess
     */
    number_winner_guess: number;
    /**
     * Points
     */
    points: number;
};

/**
 * ValidationErrorOut
 */
export type ValidationErrorOut = {
    /**
     * Ok
     */
    ok?: boolean;
    /**
     * Error Code
     */
    error_code: number;
    /**
     * Description
     */
    description: Array<SingleValidationErrorOut>;
};

export type HealthCheckApiHealthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/health/';
};

export type HealthCheckApiHealthGetErrors = {
    /**
     * Service Unavailable
     */
    503: ErrorOut;
};

export type HealthCheckApiHealthGetError =
    HealthCheckApiHealthGetErrors[keyof HealthCheckApiHealthGetErrors];

export type HealthCheckApiHealthGetResponses = {
    /**
     * Successful Response
     */
    200: GenericOutNoneType;
};

export type HealthCheckApiHealthGetResponse =
    HealthCheckApiHealthGetResponses[keyof HealthCheckApiHealthGetResponses];

export type RetrieveAllBetsApiV1BetsGetData = {
    body?: never;
    path?: never;
    query?: {
        lang?: Lang;
    };
    url: '/api/v1/bets/';
};

export type RetrieveAllBetsApiV1BetsGetErrors = {
    /**
     * Unauthorized
     */
    401: ErrorOut;
    /**
     * Unprocessable Content
     */
    422: ValidationErrorOut;
};

export type RetrieveAllBetsApiV1BetsGetError =
    RetrieveAllBetsApiV1BetsGetErrors[keyof RetrieveAllBetsApiV1BetsGetErrors];

export type RetrieveAllBetsApiV1BetsGetResponses = {
    /**
     * Successful Response
     */
    200: GenericOutAllBetsResponse;
};

export type RetrieveAllBetsApiV1BetsGetResponse =
    RetrieveAllBetsApiV1BetsGetResponses[keyof RetrieveAllBetsApiV1BetsGetResponses];

export type RetrieveBetsByPhaseCodeApiV1BetsPhasesPhaseCodeGetData = {
    body?: never;
    path: {
        /**
         * Phase Code
         */
        phase_code: string;
    };
    query?: {
        lang?: Lang;
    };
    url: '/api/v1/bets/phases/{phase_code}';
};

export type RetrieveBetsByPhaseCodeApiV1BetsPhasesPhaseCodeGetErrors = {
    /**
     * Unauthorized
     */
    401: ErrorOut;
    /**
     * Not Found
     */
    404: ErrorOut;
    /**
     * Unprocessable Content
     */
    422: ValidationErrorOut;
};

export type RetrieveBetsByPhaseCodeApiV1BetsPhasesPhaseCodeGetError =
    RetrieveBetsByPhaseCodeApiV1BetsPhasesPhaseCodeGetErrors[keyof RetrieveBetsByPhaseCodeApiV1BetsPhasesPhaseCodeGetErrors];

export type RetrieveBetsByPhaseCodeApiV1BetsPhasesPhaseCodeGetResponses = {
    /**
     * Successful Response
     */
    200: GenericOutBetsByPhaseCodeResponse;
};

export type RetrieveBetsByPhaseCodeApiV1BetsPhasesPhaseCodeGetResponse =
    RetrieveBetsByPhaseCodeApiV1BetsPhasesPhaseCodeGetResponses[keyof RetrieveBetsByPhaseCodeApiV1BetsPhasesPhaseCodeGetResponses];

export type RetrieveBetsByGroupCodeApiV1BetsGroupsGroupCodeGetData = {
    body?: never;
    path: {
        /**
         * Group Code
         */
        group_code: string;
    };
    query?: {
        lang?: Lang;
    };
    url: '/api/v1/bets/groups/{group_code}';
};

export type RetrieveBetsByGroupCodeApiV1BetsGroupsGroupCodeGetErrors = {
    /**
     * Unauthorized
     */
    401: ErrorOut;
    /**
     * Not Found
     */
    404: ErrorOut;
    /**
     * Unprocessable Content
     */
    422: ValidationErrorOut;
};

export type RetrieveBetsByGroupCodeApiV1BetsGroupsGroupCodeGetError =
    RetrieveBetsByGroupCodeApiV1BetsGroupsGroupCodeGetErrors[keyof RetrieveBetsByGroupCodeApiV1BetsGroupsGroupCodeGetErrors];

export type RetrieveBetsByGroupCodeApiV1BetsGroupsGroupCodeGetResponses = {
    /**
     * Successful Response
     */
    200: GenericOutBetsByGroupCodeResponse;
};

export type RetrieveBetsByGroupCodeApiV1BetsGroupsGroupCodeGetResponse =
    RetrieveBetsByGroupCodeApiV1BetsGroupsGroupCodeGetResponses[keyof RetrieveBetsByGroupCodeApiV1BetsGroupsGroupCodeGetResponses];

export type RetrieveGroupRankByCodeApiV1BetsGroupsRankGroupCodeGetData = {
    body?: never;
    path: {
        /**
         * Group Code
         */
        group_code: string;
    };
    query?: {
        lang?: Lang;
    };
    url: '/api/v1/bets/groups/rank/{group_code}';
};

export type RetrieveGroupRankByCodeApiV1BetsGroupsRankGroupCodeGetErrors = {
    /**
     * Unauthorized
     */
    401: ErrorOut;
    /**
     * Not Found
     */
    404: ErrorOut;
    /**
     * Unprocessable Content
     */
    422: ValidationErrorOut;
};

export type RetrieveGroupRankByCodeApiV1BetsGroupsRankGroupCodeGetError =
    RetrieveGroupRankByCodeApiV1BetsGroupsRankGroupCodeGetErrors[keyof RetrieveGroupRankByCodeApiV1BetsGroupsRankGroupCodeGetErrors];

export type RetrieveGroupRankByCodeApiV1BetsGroupsRankGroupCodeGetResponses = {
    /**
     * Successful Response
     */
    200: GenericOutGroupRankResponse;
};

export type RetrieveGroupRankByCodeApiV1BetsGroupsRankGroupCodeGetResponse =
    RetrieveGroupRankByCodeApiV1BetsGroupsRankGroupCodeGetResponses[keyof RetrieveGroupRankByCodeApiV1BetsGroupsRankGroupCodeGetResponses];

export type RetrieveBinaryBetByIdApiV1BinaryBetsBetIdGetData = {
    body?: never;
    path: {
        /**
         * Bet Id
         */
        bet_id: string;
    };
    query?: {
        lang?: Lang;
    };
    url: '/api/v1/binary_bets/{bet_id}';
};

export type RetrieveBinaryBetByIdApiV1BinaryBetsBetIdGetErrors = {
    /**
     * Unauthorized
     */
    401: ErrorOut;
    /**
     * Not Found
     */
    404: ErrorOut;
    /**
     * Unprocessable Content
     */
    422: ValidationErrorOut;
};

export type RetrieveBinaryBetByIdApiV1BinaryBetsBetIdGetError =
    RetrieveBinaryBetByIdApiV1BinaryBetsBetIdGetErrors[keyof RetrieveBinaryBetByIdApiV1BinaryBetsBetIdGetErrors];

export type RetrieveBinaryBetByIdApiV1BinaryBetsBetIdGetResponses = {
    /**
     * Successful Response
     */
    200: GenericOutBinaryBetResponse;
};

export type RetrieveBinaryBetByIdApiV1BinaryBetsBetIdGetResponse =
    RetrieveBinaryBetByIdApiV1BinaryBetsBetIdGetResponses[keyof RetrieveBinaryBetByIdApiV1BinaryBetsBetIdGetResponses];

export type ModifyBinaryBetByIdApiV1BinaryBetsBetIdPatchData = {
    body: ModifyBinaryBetIn;
    path: {
        /**
         * Bet Id
         */
        bet_id: string;
    };
    query?: {
        lang?: Lang;
    };
    url: '/api/v1/binary_bets/{bet_id}';
};

export type ModifyBinaryBetByIdApiV1BinaryBetsBetIdPatchErrors = {
    /**
     * Unauthorized
     */
    401: ErrorOut;
    /**
     * Not Found
     */
    404: ErrorOut;
    /**
     * Unprocessable Content
     */
    422: ValidationErrorOut;
};

export type ModifyBinaryBetByIdApiV1BinaryBetsBetIdPatchError =
    ModifyBinaryBetByIdApiV1BinaryBetsBetIdPatchErrors[keyof ModifyBinaryBetByIdApiV1BinaryBetsBetIdPatchErrors];

export type ModifyBinaryBetByIdApiV1BinaryBetsBetIdPatchResponses = {
    /**
     * Successful Response
     */
    200: GenericOutBinaryBetResponse;
};

export type ModifyBinaryBetByIdApiV1BinaryBetsBetIdPatchResponse =
    ModifyBinaryBetByIdApiV1BinaryBetsBetIdPatchResponses[keyof ModifyBinaryBetByIdApiV1BinaryBetsBetIdPatchResponses];

export type RetrieveAllGroupsApiV1GroupsGetData = {
    body?: never;
    path?: never;
    query?: {
        lang?: Lang;
    };
    url: '/api/v1/groups/';
};

export type RetrieveAllGroupsApiV1GroupsGetErrors = {
    /**
     * Unauthorized
     */
    401: ErrorOut;
    /**
     * Unprocessable Content
     */
    422: ValidationErrorOut;
};

export type RetrieveAllGroupsApiV1GroupsGetError =
    RetrieveAllGroupsApiV1GroupsGetErrors[keyof RetrieveAllGroupsApiV1GroupsGetErrors];

export type RetrieveAllGroupsApiV1GroupsGetResponses = {
    /**
     * Successful Response
     */
    200: GenericOutAllGroupsResponse;
};

export type RetrieveAllGroupsApiV1GroupsGetResponse =
    RetrieveAllGroupsApiV1GroupsGetResponses[keyof RetrieveAllGroupsApiV1GroupsGetResponses];

export type RetrieveGroupByIdApiV1GroupsGroupCodeGetData = {
    body?: never;
    path: {
        /**
         * Group Code
         */
        group_code: string;
    };
    query?: {
        lang?: Lang;
    };
    url: '/api/v1/groups/{group_code}';
};

export type RetrieveGroupByIdApiV1GroupsGroupCodeGetErrors = {
    /**
     * Unauthorized
     */
    401: ErrorOut;
    /**
     * Not Found
     */
    404: ErrorOut;
    /**
     * Unprocessable Content
     */
    422: ValidationErrorOut;
};

export type RetrieveGroupByIdApiV1GroupsGroupCodeGetError =
    RetrieveGroupByIdApiV1GroupsGroupCodeGetErrors[keyof RetrieveGroupByIdApiV1GroupsGroupCodeGetErrors];

export type RetrieveGroupByIdApiV1GroupsGroupCodeGetResponses = {
    /**
     * Successful Response
     */
    200: GenericOutGroupResponse;
};

export type RetrieveGroupByIdApiV1GroupsGroupCodeGetResponse =
    RetrieveGroupByIdApiV1GroupsGroupCodeGetResponses[keyof RetrieveGroupByIdApiV1GroupsGroupCodeGetResponses];

export type RetrieveGroupsByPhaseCodeApiV1GroupsPhasesPhaseCodeGetData = {
    body?: never;
    path: {
        /**
         * Phase Code
         */
        phase_code: string;
    };
    query?: {
        lang?: Lang;
    };
    url: '/api/v1/groups/phases/{phase_code}';
};

export type RetrieveGroupsByPhaseCodeApiV1GroupsPhasesPhaseCodeGetErrors = {
    /**
     * Unauthorized
     */
    401: ErrorOut;
    /**
     * Not Found
     */
    404: ErrorOut;
    /**
     * Unprocessable Content
     */
    422: ValidationErrorOut;
};

export type RetrieveGroupsByPhaseCodeApiV1GroupsPhasesPhaseCodeGetError =
    RetrieveGroupsByPhaseCodeApiV1GroupsPhasesPhaseCodeGetErrors[keyof RetrieveGroupsByPhaseCodeApiV1GroupsPhasesPhaseCodeGetErrors];

export type RetrieveGroupsByPhaseCodeApiV1GroupsPhasesPhaseCodeGetResponses = {
    /**
     * Successful Response
     */
    200: GenericOutGroupsByPhaseCodeResponse;
};

export type RetrieveGroupsByPhaseCodeApiV1GroupsPhasesPhaseCodeGetResponse =
    RetrieveGroupsByPhaseCodeApiV1GroupsPhasesPhaseCodeGetResponses[keyof RetrieveGroupsByPhaseCodeApiV1GroupsPhasesPhaseCodeGetResponses];

export type RetrieveAllPhasesApiV1PhasesGetData = {
    body?: never;
    path?: never;
    query?: {
        lang?: Lang;
    };
    url: '/api/v1/phases/';
};

export type RetrieveAllPhasesApiV1PhasesGetErrors = {
    /**
     * Unauthorized
     */
    401: ErrorOut;
    /**
     * Unprocessable Content
     */
    422: ValidationErrorOut;
};

export type RetrieveAllPhasesApiV1PhasesGetError =
    RetrieveAllPhasesApiV1PhasesGetErrors[keyof RetrieveAllPhasesApiV1PhasesGetErrors];

export type RetrieveAllPhasesApiV1PhasesGetResponses = {
    /**
     * Successful Response
     */
    200: GenericOutListPhaseOut;
};

export type RetrieveAllPhasesApiV1PhasesGetResponse =
    RetrieveAllPhasesApiV1PhasesGetResponses[keyof RetrieveAllPhasesApiV1PhasesGetResponses];

export type RetrievePhaseApiV1PhasesPhaseIdGetData = {
    body?: never;
    path: {
        /**
         * Phase Id
         */
        phase_id: string;
    };
    query?: {
        lang?: Lang;
    };
    url: '/api/v1/phases/{phase_id}';
};

export type RetrievePhaseApiV1PhasesPhaseIdGetErrors = {
    /**
     * Unauthorized
     */
    401: ErrorOut;
    /**
     * Not Found
     */
    404: ErrorOut;
    /**
     * Unprocessable Content
     */
    422: ValidationErrorOut;
};

export type RetrievePhaseApiV1PhasesPhaseIdGetError =
    RetrievePhaseApiV1PhasesPhaseIdGetErrors[keyof RetrievePhaseApiV1PhasesPhaseIdGetErrors];

export type RetrievePhaseApiV1PhasesPhaseIdGetResponses = {
    /**
     * Successful Response
     */
    200: GenericOutPhaseOut;
};

export type RetrievePhaseApiV1PhasesPhaseIdGetResponse =
    RetrievePhaseApiV1PhasesPhaseIdGetResponses[keyof RetrievePhaseApiV1PhasesPhaseIdGetResponses];

export type RetrieveScoreBoardApiV1ScoreBoardGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/score_board';
};

export type RetrieveScoreBoardApiV1ScoreBoardGetErrors = {
    /**
     * Unauthorized
     */
    401: ErrorOut;
    /**
     * Unprocessable Content
     */
    422: ValidationErrorOut;
};

export type RetrieveScoreBoardApiV1ScoreBoardGetError =
    RetrieveScoreBoardApiV1ScoreBoardGetErrors[keyof RetrieveScoreBoardApiV1ScoreBoardGetErrors];

export type RetrieveScoreBoardApiV1ScoreBoardGetResponses = {
    /**
     * Successful Response
     */
    200: GenericOutListUserResult;
};

export type RetrieveScoreBoardApiV1ScoreBoardGetResponse =
    RetrieveScoreBoardApiV1ScoreBoardGetResponses[keyof RetrieveScoreBoardApiV1ScoreBoardGetResponses];

export type RetrieveUserResultsApiV1ResultsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/results';
};

export type RetrieveUserResultsApiV1ResultsGetErrors = {
    /**
     * Unauthorized
     */
    401: ErrorOut;
    /**
     * Unprocessable Content
     */
    422: ValidationErrorOut;
};

export type RetrieveUserResultsApiV1ResultsGetError =
    RetrieveUserResultsApiV1ResultsGetErrors[keyof RetrieveUserResultsApiV1ResultsGetErrors];

export type RetrieveUserResultsApiV1ResultsGetResponses = {
    /**
     * Successful Response
     */
    200: GenericOutUserResult;
};

export type RetrieveUserResultsApiV1ResultsGetResponse =
    RetrieveUserResultsApiV1ResultsGetResponses[keyof RetrieveUserResultsApiV1ResultsGetResponses];

export type ExecuteRuleApiV1RulesRuleIdPostData = {
    body?: never;
    path: {
        /**
         * Rule Id
         */
        rule_id: string;
    };
    query?: never;
    url: '/api/v1/rules/{rule_id}';
};

export type ExecuteRuleApiV1RulesRuleIdPostErrors = {
    /**
     * Unauthorized
     */
    401: ErrorOut;
    /**
     * Not Found
     */
    404: ErrorOut;
    /**
     * Unprocessable Content
     */
    422: ValidationErrorOut;
};

export type ExecuteRuleApiV1RulesRuleIdPostError =
    ExecuteRuleApiV1RulesRuleIdPostErrors[keyof ExecuteRuleApiV1RulesRuleIdPostErrors];

export type ExecuteRuleApiV1RulesRuleIdPostResponses = {
    /**
     * Successful Response
     */
    200: GenericOutStr;
};

export type ExecuteRuleApiV1RulesRuleIdPostResponse =
    ExecuteRuleApiV1RulesRuleIdPostResponses[keyof ExecuteRuleApiV1RulesRuleIdPostResponses];

export type RetrieveScoreBetByIdApiV1ScoreBetsBetIdGetData = {
    body?: never;
    path: {
        /**
         * Bet Id
         */
        bet_id: string;
    };
    query?: {
        lang?: Lang;
    };
    url: '/api/v1/score_bets/{bet_id}';
};

export type RetrieveScoreBetByIdApiV1ScoreBetsBetIdGetErrors = {
    /**
     * Unauthorized
     */
    401: ErrorOut;
    /**
     * Not Found
     */
    404: ErrorOut;
    /**
     * Unprocessable Content
     */
    422: ValidationErrorOut;
};

export type RetrieveScoreBetByIdApiV1ScoreBetsBetIdGetError =
    RetrieveScoreBetByIdApiV1ScoreBetsBetIdGetErrors[keyof RetrieveScoreBetByIdApiV1ScoreBetsBetIdGetErrors];

export type RetrieveScoreBetByIdApiV1ScoreBetsBetIdGetResponses = {
    /**
     * Successful Response
     */
    200: GenericOutScoreBetResponse;
};

export type RetrieveScoreBetByIdApiV1ScoreBetsBetIdGetResponse =
    RetrieveScoreBetByIdApiV1ScoreBetsBetIdGetResponses[keyof RetrieveScoreBetByIdApiV1ScoreBetsBetIdGetResponses];

export type ModifyScoreBetApiV1ScoreBetsBetIdPatchData = {
    body: ModifyScoreBetIn;
    path: {
        /**
         * Bet Id
         */
        bet_id: string;
    };
    query?: {
        lang?: Lang;
    };
    url: '/api/v1/score_bets/{bet_id}';
};

export type ModifyScoreBetApiV1ScoreBetsBetIdPatchErrors = {
    /**
     * Unauthorized
     */
    401: ErrorOut;
    /**
     * Not Found
     */
    404: ErrorOut;
    /**
     * Unprocessable Content
     */
    422: ValidationErrorOut;
};

export type ModifyScoreBetApiV1ScoreBetsBetIdPatchError =
    ModifyScoreBetApiV1ScoreBetsBetIdPatchErrors[keyof ModifyScoreBetApiV1ScoreBetsBetIdPatchErrors];

export type ModifyScoreBetApiV1ScoreBetsBetIdPatchResponses = {
    /**
     * Successful Response
     */
    200: GenericOutScoreBetResponse;
};

export type ModifyScoreBetApiV1ScoreBetsBetIdPatchResponse =
    ModifyScoreBetApiV1ScoreBetsBetIdPatchResponses[keyof ModifyScoreBetApiV1ScoreBetsBetIdPatchResponses];

export type RetrieveAllTeamsApiV1TeamsGetData = {
    body?: never;
    path?: never;
    query?: {
        lang?: Lang;
    };
    url: '/api/v1/teams/';
};

export type RetrieveAllTeamsApiV1TeamsGetErrors = {
    /**
     * Unauthorized
     */
    401: ErrorOut;
    /**
     * Unprocessable Content
     */
    422: ValidationErrorOut;
};

export type RetrieveAllTeamsApiV1TeamsGetError =
    RetrieveAllTeamsApiV1TeamsGetErrors[keyof RetrieveAllTeamsApiV1TeamsGetErrors];

export type RetrieveAllTeamsApiV1TeamsGetResponses = {
    /**
     * Successful Response
     */
    200: GenericOutAllTeamsResponse;
};

export type RetrieveAllTeamsApiV1TeamsGetResponse =
    RetrieveAllTeamsApiV1TeamsGetResponses[keyof RetrieveAllTeamsApiV1TeamsGetResponses];

export type RetrieveTeamByIdApiV1TeamsTeamIdGetData = {
    body?: never;
    path: {
        /**
         * Team Id
         */
        team_id: string;
    };
    query?: {
        lang?: Lang;
    };
    url: '/api/v1/teams/{team_id}';
};

export type RetrieveTeamByIdApiV1TeamsTeamIdGetErrors = {
    /**
     * Unauthorized
     */
    401: ErrorOut;
    /**
     * Not Found
     */
    404: ErrorOut;
    /**
     * Unprocessable Content
     */
    422: ValidationErrorOut;
};

export type RetrieveTeamByIdApiV1TeamsTeamIdGetError =
    RetrieveTeamByIdApiV1TeamsTeamIdGetErrors[keyof RetrieveTeamByIdApiV1TeamsTeamIdGetErrors];

export type RetrieveTeamByIdApiV1TeamsTeamIdGetResponses = {
    /**
     * Successful Response
     */
    200: GenericOutOneTeamResponse;
};

export type RetrieveTeamByIdApiV1TeamsTeamIdGetResponse =
    RetrieveTeamByIdApiV1TeamsTeamIdGetResponses[keyof RetrieveTeamByIdApiV1TeamsTeamIdGetResponses];

export type RetrieveTeamFlagByIdApiV1TeamsTeamIdFlagGetData = {
    body?: never;
    path: {
        /**
         * Team Id
         */
        team_id: string;
    };
    query?: never;
    url: '/api/v1/teams/{team_id}/flag';
};

export type RetrieveTeamFlagByIdApiV1TeamsTeamIdFlagGetErrors = {
    /**
     * Unauthorized
     */
    401: ErrorOut;
    /**
     * Not Found
     */
    404: ErrorOut;
    /**
     * Unprocessable Content
     */
    422: ValidationErrorOut;
};

export type RetrieveTeamFlagByIdApiV1TeamsTeamIdFlagGetError =
    RetrieveTeamFlagByIdApiV1TeamsTeamIdFlagGetErrors[keyof RetrieveTeamFlagByIdApiV1TeamsTeamIdFlagGetErrors];

export type RetrieveTeamFlagByIdApiV1TeamsTeamIdFlagGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type SignupApiV1UsersSignupPostData = {
    body: SignupIn;
    path?: never;
    query?: never;
    url: '/api/v1/users/signup';
};

export type SignupApiV1UsersSignupPostErrors = {
    /**
     * Bad Request
     */
    400: ErrorOut;
    /**
     * Conflict
     */
    409: ErrorOut;
    /**
     * Unprocessable Content
     */
    422: ValidationErrorOut;
};

export type SignupApiV1UsersSignupPostError =
    SignupApiV1UsersSignupPostErrors[keyof SignupApiV1UsersSignupPostErrors];

export type SignupApiV1UsersSignupPostResponses = {
    /**
     * Successful Response
     */
    201: GenericOutSignupOut;
};

export type SignupApiV1UsersSignupPostResponse =
    SignupApiV1UsersSignupPostResponses[keyof SignupApiV1UsersSignupPostResponses];

export type PasswordRequirementsApiV1UsersSignupPasswordRequirementsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/signup/password_requirements';
};

export type PasswordRequirementsApiV1UsersSignupPasswordRequirementsGetErrors = {
    /**
     * Unprocessable Content
     */
    422: ValidationErrorOut;
};

export type PasswordRequirementsApiV1UsersSignupPasswordRequirementsGetError =
    PasswordRequirementsApiV1UsersSignupPasswordRequirementsGetErrors[keyof PasswordRequirementsApiV1UsersSignupPasswordRequirementsGetErrors];

export type PasswordRequirementsApiV1UsersSignupPasswordRequirementsGetResponses = {
    /**
     * Successful Response
     */
    200: GenericOutPasswordRequirementsOut;
};

export type PasswordRequirementsApiV1UsersSignupPasswordRequirementsGetResponse =
    PasswordRequirementsApiV1UsersSignupPasswordRequirementsGetResponses[keyof PasswordRequirementsApiV1UsersSignupPasswordRequirementsGetResponses];

export type LoginApiV1UsersLoginPostData = {
    body: LoginIn;
    path?: never;
    query?: never;
    url: '/api/v1/users/login';
};

export type LoginApiV1UsersLoginPostErrors = {
    /**
     * Unauthorized
     */
    401: ErrorOut;
    /**
     * Conflict
     */
    409: ErrorOut;
    /**
     * Unprocessable Content
     */
    422: ValidationErrorOut;
};

export type LoginApiV1UsersLoginPostError =
    LoginApiV1UsersLoginPostErrors[keyof LoginApiV1UsersLoginPostErrors];

export type LoginApiV1UsersLoginPostResponses = {
    /**
     * Successful Response
     */
    201: GenericOutLoginOut;
};

export type LoginApiV1UsersLoginPostResponse =
    LoginApiV1UsersLoginPostResponses[keyof LoginApiV1UsersLoginPostResponses];

export type RefreshApiV1UsersRefreshPostData = {
    body: RefreshIn;
    path?: never;
    query?: never;
    url: '/api/v1/users/refresh';
};

export type RefreshApiV1UsersRefreshPostErrors = {
    /**
     * Unauthorized
     */
    401: ErrorOut;
    /**
     * Unprocessable Content
     */
    422: ValidationErrorOut;
};

export type RefreshApiV1UsersRefreshPostError =
    RefreshApiV1UsersRefreshPostErrors[keyof RefreshApiV1UsersRefreshPostErrors];

export type RefreshApiV1UsersRefreshPostResponses = {
    /**
     * Successful Response
     */
    201: GenericOutRefreshOut;
};

export type RefreshApiV1UsersRefreshPostResponse =
    RefreshApiV1UsersRefreshPostResponses[keyof RefreshApiV1UsersRefreshPostResponses];

export type ModifyUserApiV1UsersUserIdPatchData = {
    body: ModifyUserIn;
    path: {
        /**
         * User Id
         */
        user_id: string;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type ModifyUserApiV1UsersUserIdPatchErrors = {
    /**
     * Bad Request
     */
    400: ErrorOut;
    /**
     * Unauthorized
     */
    401: ErrorOut;
    /**
     * Not Found
     */
    404: ErrorOut;
    /**
     * Unprocessable Content
     */
    422: ValidationErrorOut;
};

export type ModifyUserApiV1UsersUserIdPatchError =
    ModifyUserApiV1UsersUserIdPatchErrors[keyof ModifyUserApiV1UsersUserIdPatchErrors];

export type ModifyUserApiV1UsersUserIdPatchResponses = {
    /**
     * Successful Response
     */
    200: GenericOutCurrentUserOut;
};

export type ModifyUserApiV1UsersUserIdPatchResponse =
    ModifyUserApiV1UsersUserIdPatchResponses[keyof ModifyUserApiV1UsersUserIdPatchResponses];

export type CurrentUserApiV1UsersCurrentGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/current';
};

export type CurrentUserApiV1UsersCurrentGetErrors = {
    /**
     * Unauthorized
     */
    401: ErrorOut;
    /**
     * Unprocessable Content
     */
    422: ValidationErrorOut;
};

export type CurrentUserApiV1UsersCurrentGetError =
    CurrentUserApiV1UsersCurrentGetErrors[keyof CurrentUserApiV1UsersCurrentGetErrors];

export type CurrentUserApiV1UsersCurrentGetResponses = {
    /**
     * Successful Response
     */
    200: GenericOutCurrentUserOut;
};

export type CurrentUserApiV1UsersCurrentGetResponse =
    CurrentUserApiV1UsersCurrentGetResponses[keyof CurrentUserApiV1UsersCurrentGetResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};
