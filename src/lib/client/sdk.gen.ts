// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as ClientOptions, TDataShape } from './client';
import { client as _heyApiClient } from './client.gen';
import type {
    CurrentUserApiV1UsersCurrentGetData,
    CurrentUserApiV1UsersCurrentGetErrors,
    CurrentUserApiV1UsersCurrentGetResponses,
    ExecuteRuleApiV1RulesRuleIdPostData,
    ExecuteRuleApiV1RulesRuleIdPostErrors,
    ExecuteRuleApiV1RulesRuleIdPostResponses,
    HealthCheckApiHealthGetData,
    HealthCheckApiHealthGetErrors,
    HealthCheckApiHealthGetResponses,
    LoginApiV1UsersLoginPostData,
    LoginApiV1UsersLoginPostErrors,
    LoginApiV1UsersLoginPostResponses,
    ModifyBinaryBetByIdApiV1BinaryBetsBetIdPatchData,
    ModifyBinaryBetByIdApiV1BinaryBetsBetIdPatchErrors,
    ModifyBinaryBetByIdApiV1BinaryBetsBetIdPatchResponses,
    ModifyScoreBetApiV1ScoreBetsBetIdPatchData,
    ModifyScoreBetApiV1ScoreBetsBetIdPatchErrors,
    ModifyScoreBetApiV1ScoreBetsBetIdPatchResponses,
    ModifyUserApiV1UsersUserIdPatchData,
    ModifyUserApiV1UsersUserIdPatchErrors,
    ModifyUserApiV1UsersUserIdPatchResponses,
    PasswordRequirementsApiV1UsersSignupPasswordRequirementsGetData,
    PasswordRequirementsApiV1UsersSignupPasswordRequirementsGetErrors,
    PasswordRequirementsApiV1UsersSignupPasswordRequirementsGetResponses,
    RefreshApiV1UsersRefreshPostData,
    RefreshApiV1UsersRefreshPostErrors,
    RefreshApiV1UsersRefreshPostResponses,
    RetrieveAllBetsApiV1BetsGetData,
    RetrieveAllBetsApiV1BetsGetErrors,
    RetrieveAllBetsApiV1BetsGetResponses,
    RetrieveAllGroupsApiV1GroupsGetData,
    RetrieveAllGroupsApiV1GroupsGetErrors,
    RetrieveAllGroupsApiV1GroupsGetResponses,
    RetrieveAllPhasesApiV1PhasesGetData,
    RetrieveAllPhasesApiV1PhasesGetErrors,
    RetrieveAllPhasesApiV1PhasesGetResponses,
    RetrieveAllTeamsApiV1TeamsGetData,
    RetrieveAllTeamsApiV1TeamsGetErrors,
    RetrieveAllTeamsApiV1TeamsGetResponses,
    RetrieveBetsByGroupCodeApiV1BetsGroupsGroupCodeGetData,
    RetrieveBetsByGroupCodeApiV1BetsGroupsGroupCodeGetErrors,
    RetrieveBetsByGroupCodeApiV1BetsGroupsGroupCodeGetResponses,
    RetrieveBetsByPhaseCodeApiV1BetsPhasesPhaseCodeGetData,
    RetrieveBetsByPhaseCodeApiV1BetsPhasesPhaseCodeGetErrors,
    RetrieveBetsByPhaseCodeApiV1BetsPhasesPhaseCodeGetResponses,
    RetrieveBinaryBetByIdApiV1BinaryBetsBetIdGetData,
    RetrieveBinaryBetByIdApiV1BinaryBetsBetIdGetErrors,
    RetrieveBinaryBetByIdApiV1BinaryBetsBetIdGetResponses,
    RetrieveGroupByIdApiV1GroupsGroupCodeGetData,
    RetrieveGroupByIdApiV1GroupsGroupCodeGetErrors,
    RetrieveGroupByIdApiV1GroupsGroupCodeGetResponses,
    RetrieveGroupRankByCodeApiV1BetsGroupsRankGroupCodeGetData,
    RetrieveGroupRankByCodeApiV1BetsGroupsRankGroupCodeGetErrors,
    RetrieveGroupRankByCodeApiV1BetsGroupsRankGroupCodeGetResponses,
    RetrieveGroupsByPhaseCodeApiV1GroupsPhasesPhaseCodeGetData,
    RetrieveGroupsByPhaseCodeApiV1GroupsPhasesPhaseCodeGetErrors,
    RetrieveGroupsByPhaseCodeApiV1GroupsPhasesPhaseCodeGetResponses,
    RetrievePhaseApiV1PhasesPhaseIdGetData,
    RetrievePhaseApiV1PhasesPhaseIdGetErrors,
    RetrievePhaseApiV1PhasesPhaseIdGetResponses,
    RetrieveScoreBetByIdApiV1ScoreBetsBetIdGetData,
    RetrieveScoreBetByIdApiV1ScoreBetsBetIdGetErrors,
    RetrieveScoreBetByIdApiV1ScoreBetsBetIdGetResponses,
    RetrieveScoreBoardApiV1ScoreBoardGetData,
    RetrieveScoreBoardApiV1ScoreBoardGetErrors,
    RetrieveScoreBoardApiV1ScoreBoardGetResponses,
    RetrieveTeamByIdApiV1TeamsTeamIdGetData,
    RetrieveTeamByIdApiV1TeamsTeamIdGetErrors,
    RetrieveTeamByIdApiV1TeamsTeamIdGetResponses,
    RetrieveTeamFlagByIdApiV1TeamsTeamIdFlagGetData,
    RetrieveTeamFlagByIdApiV1TeamsTeamIdFlagGetErrors,
    RetrieveTeamFlagByIdApiV1TeamsTeamIdFlagGetResponses,
    RetrieveUserResultsApiV1ResultsGetData,
    RetrieveUserResultsApiV1ResultsGetErrors,
    RetrieveUserResultsApiV1ResultsGetResponses,
    SignupApiV1UsersSignupPostData,
    SignupApiV1UsersSignupPostErrors,
    SignupApiV1UsersSignupPostResponses,
} from './types.gen';

export type Options<
    TData extends TDataShape = TDataShape,
    ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Health Check
 */
export const healthCheckApiHealthGet = <ThrowOnError extends boolean = false>(
    options?: Options<HealthCheckApiHealthGetData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        HealthCheckApiHealthGetResponses,
        HealthCheckApiHealthGetErrors,
        ThrowOnError
    >({
        url: '/api/health/',
        ...options,
    });
};

/**
 * Retrieve All Bets
 */
export const retrieveAllBetsApiV1BetsGet = <ThrowOnError extends boolean = false>(
    options?: Options<RetrieveAllBetsApiV1BetsGetData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        RetrieveAllBetsApiV1BetsGetResponses,
        RetrieveAllBetsApiV1BetsGetErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/bets/',
        ...options,
    });
};

/**
 * Retrieve Bets By Phase Code
 */
export const retrieveBetsByPhaseCodeApiV1BetsPhasesPhaseCodeGet = <
    ThrowOnError extends boolean = false,
>(
    options: Options<RetrieveBetsByPhaseCodeApiV1BetsPhasesPhaseCodeGetData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        RetrieveBetsByPhaseCodeApiV1BetsPhasesPhaseCodeGetResponses,
        RetrieveBetsByPhaseCodeApiV1BetsPhasesPhaseCodeGetErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/bets/phases/{phase_code}',
        ...options,
    });
};

/**
 * Retrieve Bets By Group Code
 */
export const retrieveBetsByGroupCodeApiV1BetsGroupsGroupCodeGet = <
    ThrowOnError extends boolean = false,
>(
    options: Options<RetrieveBetsByGroupCodeApiV1BetsGroupsGroupCodeGetData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        RetrieveBetsByGroupCodeApiV1BetsGroupsGroupCodeGetResponses,
        RetrieveBetsByGroupCodeApiV1BetsGroupsGroupCodeGetErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/bets/groups/{group_code}',
        ...options,
    });
};

/**
 * Retrieve Group Rank By Code
 */
export const retrieveGroupRankByCodeApiV1BetsGroupsRankGroupCodeGet = <
    ThrowOnError extends boolean = false,
>(
    options: Options<RetrieveGroupRankByCodeApiV1BetsGroupsRankGroupCodeGetData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        RetrieveGroupRankByCodeApiV1BetsGroupsRankGroupCodeGetResponses,
        RetrieveGroupRankByCodeApiV1BetsGroupsRankGroupCodeGetErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/bets/groups/rank/{group_code}',
        ...options,
    });
};

/**
 * Retrieve Binary Bet By Id
 */
export const retrieveBinaryBetByIdApiV1BinaryBetsBetIdGet = <ThrowOnError extends boolean = false>(
    options: Options<RetrieveBinaryBetByIdApiV1BinaryBetsBetIdGetData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        RetrieveBinaryBetByIdApiV1BinaryBetsBetIdGetResponses,
        RetrieveBinaryBetByIdApiV1BinaryBetsBetIdGetErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/binary_bets/{bet_id}',
        ...options,
    });
};

/**
 * Modify Binary Bet By Id
 */
export const modifyBinaryBetByIdApiV1BinaryBetsBetIdPatch = <ThrowOnError extends boolean = false>(
    options: Options<ModifyBinaryBetByIdApiV1BinaryBetsBetIdPatchData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).patch<
        ModifyBinaryBetByIdApiV1BinaryBetsBetIdPatchResponses,
        ModifyBinaryBetByIdApiV1BinaryBetsBetIdPatchErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/binary_bets/{bet_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Retrieve All Groups
 */
export const retrieveAllGroupsApiV1GroupsGet = <ThrowOnError extends boolean = false>(
    options?: Options<RetrieveAllGroupsApiV1GroupsGetData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        RetrieveAllGroupsApiV1GroupsGetResponses,
        RetrieveAllGroupsApiV1GroupsGetErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/groups/',
        ...options,
    });
};

/**
 * Retrieve Group By Id
 */
export const retrieveGroupByIdApiV1GroupsGroupCodeGet = <ThrowOnError extends boolean = false>(
    options: Options<RetrieveGroupByIdApiV1GroupsGroupCodeGetData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        RetrieveGroupByIdApiV1GroupsGroupCodeGetResponses,
        RetrieveGroupByIdApiV1GroupsGroupCodeGetErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/groups/{group_code}',
        ...options,
    });
};

/**
 * Retrieve Groups By Phase Code
 */
export const retrieveGroupsByPhaseCodeApiV1GroupsPhasesPhaseCodeGet = <
    ThrowOnError extends boolean = false,
>(
    options: Options<RetrieveGroupsByPhaseCodeApiV1GroupsPhasesPhaseCodeGetData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        RetrieveGroupsByPhaseCodeApiV1GroupsPhasesPhaseCodeGetResponses,
        RetrieveGroupsByPhaseCodeApiV1GroupsPhasesPhaseCodeGetErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/groups/phases/{phase_code}',
        ...options,
    });
};

/**
 * Retrieve All Phases
 */
export const retrieveAllPhasesApiV1PhasesGet = <ThrowOnError extends boolean = false>(
    options?: Options<RetrieveAllPhasesApiV1PhasesGetData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        RetrieveAllPhasesApiV1PhasesGetResponses,
        RetrieveAllPhasesApiV1PhasesGetErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/phases/',
        ...options,
    });
};

/**
 * Retrieve Phase
 */
export const retrievePhaseApiV1PhasesPhaseIdGet = <ThrowOnError extends boolean = false>(
    options: Options<RetrievePhaseApiV1PhasesPhaseIdGetData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        RetrievePhaseApiV1PhasesPhaseIdGetResponses,
        RetrievePhaseApiV1PhasesPhaseIdGetErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/phases/{phase_id}',
        ...options,
    });
};

/**
 * Retrieve Score Board
 */
export const retrieveScoreBoardApiV1ScoreBoardGet = <ThrowOnError extends boolean = false>(
    options?: Options<RetrieveScoreBoardApiV1ScoreBoardGetData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        RetrieveScoreBoardApiV1ScoreBoardGetResponses,
        RetrieveScoreBoardApiV1ScoreBoardGetErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/score_board',
        ...options,
    });
};

/**
 * Retrieve User Results
 */
export const retrieveUserResultsApiV1ResultsGet = <ThrowOnError extends boolean = false>(
    options?: Options<RetrieveUserResultsApiV1ResultsGetData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        RetrieveUserResultsApiV1ResultsGetResponses,
        RetrieveUserResultsApiV1ResultsGetErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/results',
        ...options,
    });
};

/**
 * Execute Rule
 */
export const executeRuleApiV1RulesRuleIdPost = <ThrowOnError extends boolean = false>(
    options: Options<ExecuteRuleApiV1RulesRuleIdPostData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        ExecuteRuleApiV1RulesRuleIdPostResponses,
        ExecuteRuleApiV1RulesRuleIdPostErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/rules/{rule_id}',
        ...options,
    });
};

/**
 * Retrieve Score Bet By Id
 */
export const retrieveScoreBetByIdApiV1ScoreBetsBetIdGet = <ThrowOnError extends boolean = false>(
    options: Options<RetrieveScoreBetByIdApiV1ScoreBetsBetIdGetData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        RetrieveScoreBetByIdApiV1ScoreBetsBetIdGetResponses,
        RetrieveScoreBetByIdApiV1ScoreBetsBetIdGetErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/score_bets/{bet_id}',
        ...options,
    });
};

/**
 * Modify Score Bet
 */
export const modifyScoreBetApiV1ScoreBetsBetIdPatch = <ThrowOnError extends boolean = false>(
    options: Options<ModifyScoreBetApiV1ScoreBetsBetIdPatchData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).patch<
        ModifyScoreBetApiV1ScoreBetsBetIdPatchResponses,
        ModifyScoreBetApiV1ScoreBetsBetIdPatchErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/score_bets/{bet_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Retrieve All Teams
 */
export const retrieveAllTeamsApiV1TeamsGet = <ThrowOnError extends boolean = false>(
    options?: Options<RetrieveAllTeamsApiV1TeamsGetData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        RetrieveAllTeamsApiV1TeamsGetResponses,
        RetrieveAllTeamsApiV1TeamsGetErrors,
        ThrowOnError
    >({
        url: '/api/v1/teams/',
        ...options,
    });
};

/**
 * Retrieve Team By Id
 */
export const retrieveTeamByIdApiV1TeamsTeamIdGet = <ThrowOnError extends boolean = false>(
    options: Options<RetrieveTeamByIdApiV1TeamsTeamIdGetData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        RetrieveTeamByIdApiV1TeamsTeamIdGetResponses,
        RetrieveTeamByIdApiV1TeamsTeamIdGetErrors,
        ThrowOnError
    >({
        url: '/api/v1/teams/{team_id}',
        ...options,
    });
};

/**
 * Retrieve Team Flag By Id
 */
export const retrieveTeamFlagByIdApiV1TeamsTeamIdFlagGet = <ThrowOnError extends boolean = false>(
    options: Options<RetrieveTeamFlagByIdApiV1TeamsTeamIdFlagGetData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        RetrieveTeamFlagByIdApiV1TeamsTeamIdFlagGetResponses,
        RetrieveTeamFlagByIdApiV1TeamsTeamIdFlagGetErrors,
        ThrowOnError
    >({
        url: '/api/v1/teams/{team_id}/flag',
        ...options,
    });
};

/**
 * Signup
 */
export const signupApiV1UsersSignupPost = <ThrowOnError extends boolean = false>(
    options: Options<SignupApiV1UsersSignupPostData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        SignupApiV1UsersSignupPostResponses,
        SignupApiV1UsersSignupPostErrors,
        ThrowOnError
    >({
        url: '/api/v1/users/signup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Password Requirements
 */
export const passwordRequirementsApiV1UsersSignupPasswordRequirementsGet = <
    ThrowOnError extends boolean = false,
>(
    options?: Options<
        PasswordRequirementsApiV1UsersSignupPasswordRequirementsGetData,
        ThrowOnError
    >,
) => {
    return (options?.client ?? _heyApiClient).get<
        PasswordRequirementsApiV1UsersSignupPasswordRequirementsGetResponses,
        PasswordRequirementsApiV1UsersSignupPasswordRequirementsGetErrors,
        ThrowOnError
    >({
        url: '/api/v1/users/signup/password_requirements',
        ...options,
    });
};

/**
 * Login
 */
export const loginApiV1UsersLoginPost = <ThrowOnError extends boolean = false>(
    options: Options<LoginApiV1UsersLoginPostData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        LoginApiV1UsersLoginPostResponses,
        LoginApiV1UsersLoginPostErrors,
        ThrowOnError
    >({
        url: '/api/v1/users/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Refresh
 */
export const refreshApiV1UsersRefreshPost = <ThrowOnError extends boolean = false>(
    options: Options<RefreshApiV1UsersRefreshPostData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        RefreshApiV1UsersRefreshPostResponses,
        RefreshApiV1UsersRefreshPostErrors,
        ThrowOnError
    >({
        url: '/api/v1/users/refresh',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Modify User
 */
export const modifyUserApiV1UsersUserIdPatch = <ThrowOnError extends boolean = false>(
    options: Options<ModifyUserApiV1UsersUserIdPatchData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).patch<
        ModifyUserApiV1UsersUserIdPatchResponses,
        ModifyUserApiV1UsersUserIdPatchErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/users/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Current User
 */
export const currentUserApiV1UsersCurrentGet = <ThrowOnError extends boolean = false>(
    options?: Options<CurrentUserApiV1UsersCurrentGetData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        CurrentUserApiV1UsersCurrentGetResponses,
        CurrentUserApiV1UsersCurrentGetErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/v1/users/current',
        ...options,
    });
};
